#Tyler Evans u1313811
#to access create this Cmake file I used
#this vid to understand cmake https://www.youtube.com/watch?v=7YcbaupsY8I


# == DO NEVER EDIT THE NEXT LINES for Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.0.0)
set(toolchainVersion 13_2_Rel1)
set(picotoolVersion 2.0.0)
if(EXISTS ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
    include(${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
elseif(DEFINED ENV{PICO_SDK_PATH})
    set(PICO_SDK_PATH $ENV{PICO_SDK_PATH})
else()
    set(PICO_SDK_PATH lib/pico-sdk)
endif()

if(DEFINED ENV{FREERTOS_KERNEL_PATH})
    set(FREERTOS_KERNEL_PATH $ENV{FREERTOS_KERNEL_PATH})
else()
    set(FREERTOS_KERNEL_PATH ${CMAKE_SOURCE_DIR}/lib/freertos)
endif()
message("FreeRTOS path: ${FREERTOS_KERNEL_PATH}")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# ====================================================================================

#command creates project and sets min version for cmake
cmake_minimum_required(VERSION 3.13)

#here is project name it is in C C++ and ASEM.
project(project C CXX ASM)

#define the stand. for c and c++
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

#this gets the cmake from the pico sdk
#include($ENV{/include/pico-sdk/}pico_sdk_init.cmake)
include($ENV{PICO_SDK_PATH}/pico_sdk_init.cmake)

#done becasue it inits the sdk
pico_sdk_init()

project(project)


#this links the pico sdk with the lib
target_link_libraries(project pico_stdlib)

add_executable(project src/main.c)

#this enables usb reading from screen command
pico_enable_stdio_usb(project 1)
